{"version":3,"sources":["components/fieldComponents/Dropdown.tsx","components/fieldComponents/Textbox.tsx","components/fieldComponents/Checkbox.tsx","components/Page.tsx","components/ComponentHandler.tsx","components/DonePage.tsx","components/PageHeader.tsx","redux/formData/formData.types.js","components/FormWizard.tsx","redux/formData/formData.actions.js","App.js","reportWebVitals.js","redux/formData/formData.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Dropdown","fieldProps","onChange","data","label","placeholderText","required","id","className","htmlFor","defaultValue","e","target","value","hidden","disabled","map","option","Textbox","validation","type","pattern","validRegex","customValidationErrorMessage","errorMessage","placeholder","title","Checkbox","checked","Page","pageId","fields","onSubmitClick","useState","formValues","setFormValues","onFieldChange","newValues","useEffect","onSubmit","field","component","mapToComponent","connect","state","formData","values","doneMessage","console","log","PageHeader","selected","completed","UPDATE","dispatch","updateFormData","form","pages","pageToShow","setPageToShow","done","setDone","pagesInclDonePage","page","index","push","headersToShow","updatedValues","preventDefault","length","App","userForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","rootReducer","combineReducers","action","Object","assign","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66b7b12f.chunk.js","sourcesContent":["import \"./Dropdown.css\";\r\nimport { DropdownFieldType } from \"../../types/form.types\";\r\n\r\ninterface DropdownPropsType {\r\n  fieldProps: DropdownFieldType;\r\n  onChange: (arg0: string) => void;\r\n}\r\n\r\nexport default function Dropdown({ fieldProps, onChange }: DropdownPropsType) {\r\n  const { data = [], label, placeholderText = \"\", required, id } = fieldProps;\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <label htmlFor={`dropdown_${id}`}>\r\n        {label}\r\n        {required && \"*\"}\r\n      </label>\r\n      <select\r\n        {...(required && { required: true })}\r\n        defaultValue=\"\"\r\n        onChange={(e) => onChange(e.target.value)}\r\n        className=\"custom-select\"\r\n        id={`dropdown_${id}`}\r\n      >\r\n        <option value=\"\" hidden disabled>\r\n          {placeholderText}\r\n        </option>\r\n        {data.map((option) => (\r\n          <option key={`option_${option}`} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import { TextboxFieldType } from \"../../types/form.types\";\r\n\r\ninterface TextboxPropsType {\r\n  fieldProps: TextboxFieldType;\r\n  onChange: (arg0: string) => void;\r\n}\r\n\r\nexport default function Textbox({ fieldProps, onChange }: TextboxPropsType) {\r\n  const {\r\n    label,\r\n    required,\r\n    validation = { type: \"text\" },\r\n    placeholderText = \"\",\r\n    id,\r\n  } = fieldProps;\r\n  const pattern = validation && validation.validRegex; //Regex pattern from config\r\n  const customValidationErrorMessage = validation && validation.errorMessage; //custom validation message - appears in pop up if regex validation failed\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={`textbox_${id}`}>\r\n        {label}\r\n        {required && \"*\"}\r\n      </label>\r\n      <input\r\n        {...(required && { required: true })}\r\n        pattern={pattern}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        type={validation.type}\r\n        className=\"form-control\"\r\n        id={`textbox_${id}`}\r\n        placeholder={placeholderText}\r\n        title={customValidationErrorMessage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./Checkbox.css\";\r\nimport { CheckboxFieldType } from \"../../types/form.types\";\r\n\r\ninterface CheckboxPropsType {\r\n  fieldProps: CheckboxFieldType;\r\n  onChange: (arg0: boolean) => void;\r\n}\r\n\r\nexport default function Checkbox({ fieldProps, onChange }: CheckboxPropsType) {\r\n  const { id, required, label } = fieldProps;\r\n\r\n  return (\r\n    <div className=\"form-check\">\r\n      <input\r\n        {...(required && { required: true })}\r\n        onChange={(e) => onChange(e.target.checked)}\r\n        className=\"form-check-input\"\r\n        type=\"checkbox\"\r\n        value={id}\r\n        id={`checkbox_${id}`}\r\n      />\r\n      <label className=\"form-check-label\" htmlFor={`checkbox_${id}`}>\r\n        {label}\r\n        {required && \"*\"}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport \"./Page.css\";\r\nimport { FieldType, FormValuesType } from \"../types/form.types\";\r\nimport { mapToComponent } from \"./ComponentHandler\";\r\n\r\ninterface PagePropsType {\r\n  //ID of page\r\n  id: string;\r\n\r\n  //fields to be displayed on the page\r\n  fields: FieldType[];\r\n\r\n  //callback function to be triggered when submit button is clicked on the current page\r\n  onSubmitClick: (\r\n    e: { preventDefault: () => void },\r\n    formValues: FormValuesType\r\n  ) => void;\r\n}\r\n\r\nexport default function Page({\r\n  id: pageId,\r\n  fields,\r\n  onSubmitClick,\r\n}: PagePropsType) {\r\n  const [formValues, setFormValues] = useState<FormValuesType>({});\r\n\r\n  //function to change state when field changes\r\n  const onFieldChange = (value: any, id: string) => {\r\n    let newValues = { ...formValues };\r\n    newValues[id] = value;\r\n    setFormValues(newValues);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFormValues({});\r\n  }, [pageId]);\r\n\r\n  return (\r\n    <form\r\n      className=\"form needs-validation\"\r\n      onSubmit={(e) => onSubmitClick(e, formValues)}\r\n    >\r\n      {fields.map((field) => mapToComponent(field, onFieldChange))}\r\n      <div className=\"submitButton\">\r\n        <button className=\"btn btn-primary\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import { FieldType } from \"../types/form.types\";\r\nimport Dropdown from \"./fieldComponents/Dropdown\";\r\nimport Textbox from \"./fieldComponents/Textbox\";\r\nimport Checkbox from \"./fieldComponents/Checkbox\";\r\n\r\n/*\r\nFunction which maps component text in config to react component\r\nAdd new component mappings here after creating component under the field components directory\r\n*/\r\n\r\nexport const mapToComponent = (\r\n  field: FieldType,\r\n  onFieldChange: (value: string | boolean, id: string) => void\r\n) => {\r\n  const { component, id } = field;\r\n  switch (component) {\r\n    case \"textbox\":\r\n      return (\r\n        <Textbox\r\n          key={id}\r\n          fieldProps={field}\r\n          onChange={(value: string) => onFieldChange(value, id)}\r\n        />\r\n      );\r\n    case \"dropdown\":\r\n      return (\r\n        <Dropdown\r\n          key={id}\r\n          fieldProps={field}\r\n          onChange={(value: string) => onFieldChange(value, id)}\r\n        />\r\n      );\r\n    case \"checkbox\":\r\n      return (\r\n        <Checkbox\r\n          key={id}\r\n          fieldProps={field}\r\n          onChange={(value: boolean) => onFieldChange(value, id)}\r\n        />\r\n      );\r\n  }\r\n};\r\n","import \"./DonePage.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FormValuesType } from \"../types/form.types\";\r\n\r\ninterface DonePagePropsType {\r\n  formValues: FormValuesType;\r\n  doneMessage: string;\r\n}\r\n\r\nfunction DonePage({\r\n  formValues,\r\n  doneMessage = \"Completed\",\r\n}: DonePagePropsType) {\r\n  console.log(formValues);\r\n\r\n  return (\r\n    <div className=\"donePage\">\r\n      <i className=\"icon bi bi-check2-circle\"></i>\r\n      <br />\r\n      {doneMessage}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: { formData: FormValuesType[] }) => {\r\n  return {\r\n    formValues: state.formData.values,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(DonePage);\r\n","import \"./PageHeader.css\";\r\n\r\ninterface PageHeaderPropsType {\r\n  //boolean to indicate whether the current highlighted heading is the page being displayed\r\n  selected: boolean;\r\n\r\n  //title of page being displayed\r\n  title: string;\r\n\r\n  //boolean to indicate if user has completed the page and moved onto next page\r\n  completed: boolean;\r\n}\r\n\r\nexport default function PageHeader({\r\n  selected,\r\n  title,\r\n  completed,\r\n}: PageHeaderPropsType) {\r\n  return (\r\n    <div\r\n      className={`header${selected ? \" selected\" : \"\"}${\r\n        completed ? \" completed\" : \"\"\r\n      }`}\r\n    >\r\n      {title}\r\n    </div>\r\n  );\r\n}\r\n","export const UPDATE = 'UPDATE';","import { useState } from \"react\";\r\nimport Page from \"./Page\";\r\nimport DonePage from \"./DonePage\";\r\nimport PageHeader from \"./PageHeader\";\r\nimport \"./FormWizard.css\";\r\nimport { FormType, PageType, FormValuesType } from \"../types/form.types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { updateFormData } from \"../redux/formData/formData.actions\";\r\n\r\ninterface FormWizardPropsType {\r\n  //contains entire form to be rendered by the wizard\r\n  form: FormType;\r\n\r\n  //function to update the form values in redux store\r\n  updateFormData: (arg0: FormValuesType) => void;\r\n}\r\n\r\nfunction FormWizard({ form, updateFormData }: FormWizardPropsType) {\r\n  const { title, pages, doneMessage } = form;\r\n  const [pageToShow, setPageToShow] = useState(0); //index of page of the form to display on screen\r\n  const [done, setDone] = useState(false); //state to indicate whether user has completed all pages of the form\r\n\r\n  //generates headers to be displayed above form\r\n  const headersToShow = (pages: PageType[]) => {\r\n    let pagesInclDonePage = pages.map((page, index) => (\r\n      <PageHeader\r\n        key={page.id}\r\n        title={page.title}\r\n        selected={!done && page.id === pages[pageToShow].id}\r\n        completed={done || index < pageToShow}\r\n      />\r\n    ));\r\n    pagesInclDonePage.push(\r\n      <PageHeader\r\n        key={\"donePage\"}\r\n        title={\"Done\"}\r\n        selected={done}\r\n        completed={false}\r\n      />\r\n    );\r\n    return pagesInclDonePage;\r\n  };\r\n\r\n  const onSubmitClick = (\r\n    e: { preventDefault: () => void },\r\n    values: FormValuesType\r\n  ) => {\r\n    e.preventDefault();\r\n    const currPageId = pages[pageToShow].id;\r\n    let updatedValues: FormValuesType;\r\n    updatedValues = {};\r\n    updatedValues[currPageId] = { ...values };\r\n    updateFormData(updatedValues);\r\n    if (pageToShow < pages.length - 1) {\r\n      //case where more pages are present, i.e. ;ast page hasnt been reached\r\n      setPageToShow(pageToShow + 1);\r\n    } else {\r\n      //case where last page has been reached\r\n      setDone(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"formWizard\">\r\n      <div className=\"formWizardTitle\">{title}</div>\r\n\r\n      <div className=\"pageHeader\">{headersToShow(pages)}</div>\r\n\r\n      <div className=\"formPage\">\r\n        {!done ? (\r\n          <Page\r\n            id={pages[pageToShow].id}\r\n            fields={pages[pageToShow].fields}\r\n            onSubmitClick={onSubmitClick}\r\n          />\r\n        ) : (\r\n          <DonePage doneMessage={doneMessage} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; values: FormValuesType }) => any\r\n) => {\r\n  return {\r\n    updateFormData: (values: FormValuesType) =>\r\n      dispatch(updateFormData(values)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(FormWizard);\r\n","import {UPDATE} from './formData.types'\r\n\r\nexport const updateFormData = (values) => {\r\n    return {\r\n        type: UPDATE,\r\n        values\r\n    }\r\n}","import userForm from \"./formConfigs/user-form.json\";\nimport FormWizard from \"./components/FormWizard\";\n\nfunction App() {\n  return <FormWizard form={userForm} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UPDATE } from \"./formData.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  values: {},\r\n};\r\n\r\nexport default function reducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case UPDATE:\r\n      //when state is changed, we need to ensure the reference of the object has also changed, hence Object.assign is being used\r\n      return Object.assign({}, state, {\r\n        values: Object.assign({}, state.values, action.values),\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\n\r\nimport formDataReducer from './formData/formData.reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n    formData: formDataReducer,\r\n\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}